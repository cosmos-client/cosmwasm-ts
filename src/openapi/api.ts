/* tslint:disable */
/* eslint-disable */
/**
 * cosmwasm/wasm/v1/query.proto
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: version not set
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, AxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError } from './base';

/**
 * 
 * @export
 * @interface CodeInfoResponseContainsCodeMetaDataFromCodeInfo
 */
export interface CodeInfoResponseContainsCodeMetaDataFromCodeInfo {
    /**
     * 
     * @type {string}
     * @memberof CodeInfoResponseContainsCodeMetaDataFromCodeInfo
     */
    'code_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeInfoResponseContainsCodeMetaDataFromCodeInfo
     */
    'creator'?: string;
    /**
     * 
     * @type {string}
     * @memberof CodeInfoResponseContainsCodeMetaDataFromCodeInfo
     */
    'data_hash'?: string;
    /**
     * 
     * @type {CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermission}
     * @memberof CodeInfoResponseContainsCodeMetaDataFromCodeInfo
     */
    'instantiate_permission'?: CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermission;
}
/**
 * AccessConfig access control type.
 * @export
 * @interface CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermission
 */
export interface CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermission {
    /**
     * - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty value  - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden  - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to an address  - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
     * @type {string}
     * @memberof CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermission
     */
    'permission'?: CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermissionPermissionEnum;
    /**
     * 
     * @type {string}
     * @memberof CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermission
     */
    'address'?: string;
}

export const CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermissionPermissionEnum = {
    Unspecified: 'ACCESS_TYPE_UNSPECIFIED',
    Nobody: 'ACCESS_TYPE_NOBODY',
    OnlyAddress: 'ACCESS_TYPE_ONLY_ADDRESS',
    Everybody: 'ACCESS_TYPE_EVERYBODY'
} as const;

export type CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermissionPermissionEnum = typeof CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermissionPermissionEnum[keyof typeof CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermissionPermissionEnum];

/**
 * 
 * @export
 * @interface CodesDefaultResponse
 */
export interface CodesDefaultResponse {
    /**
     * 
     * @type {string}
     * @memberof CodesDefaultResponse
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof CodesDefaultResponse
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof CodesDefaultResponse
     */
    'message'?: string;
    /**
     * 
     * @type {Array<CodesDefaultResponseDetailsInner>}
     * @memberof CodesDefaultResponse
     */
    'details'?: Array<CodesDefaultResponseDetailsInner>;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface CodesDefaultResponseDetailsInner
 */
export interface CodesDefaultResponseDetailsInner {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof CodesDefaultResponseDetailsInner
     */
    'type_url'?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof CodesDefaultResponseDetailsInner
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface ContractInfoStoresAWASMContractInstance
 */
export interface ContractInfoStoresAWASMContractInstance {
    /**
     * 
     * @type {string}
     * @memberof ContractInfoStoresAWASMContractInstance
     */
    'code_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractInfoStoresAWASMContractInstance
     */
    'creator'?: string;
    /**
     * 
     * @type {string}
     * @memberof ContractInfoStoresAWASMContractInstance
     */
    'admin'?: string;
    /**
     * Label is optional metadata to be stored with a contract instance.
     * @type {string}
     * @memberof ContractInfoStoresAWASMContractInstance
     */
    'label'?: string;
    /**
     * 
     * @type {CreatedTxPositionWhenTheContractWasInstantiatedThisDataShouldKeptInternalAndNotBeExposedViaQueryResultsJustUseForSorting}
     * @memberof ContractInfoStoresAWASMContractInstance
     */
    'created'?: CreatedTxPositionWhenTheContractWasInstantiatedThisDataShouldKeptInternalAndNotBeExposedViaQueryResultsJustUseForSorting;
    /**
     * 
     * @type {string}
     * @memberof ContractInfoStoresAWASMContractInstance
     */
    'ibc_port_id'?: string;
    /**
     * 
     * @type {CodesDefaultResponseDetailsInner}
     * @memberof ContractInfoStoresAWASMContractInstance
     */
    'extension'?: CodesDefaultResponseDetailsInner;
}
/**
 * message SomeRequest {          Foo some_parameter = 1;          PageRequest pagination = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageRequest
 */
export interface CosmosBaseQueryV1beta1PageRequest {
    /**
     * key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'key'?: string;
    /**
     * offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'offset'?: string;
    /**
     * limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'limit'?: string;
    /**
     * count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @type {boolean}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'count_total'?: boolean;
    /**
     * reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @type {boolean}
     * @memberof CosmosBaseQueryV1beta1PageRequest
     */
    'reverse'?: boolean;
}
/**
 * PageResponse is to be embedded in gRPC response messages where the corresponding request message has used PageRequest.   message SomeResponse {          repeated Bar results = 1;          PageResponse page = 2;  }
 * @export
 * @interface CosmosBaseQueryV1beta1PageResponse
 */
export interface CosmosBaseQueryV1beta1PageResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageResponse
     */
    'next_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmosBaseQueryV1beta1PageResponse
     */
    'total'?: string;
}
/**
 * AbsoluteTxPosition is a unique transaction position that allows for global ordering of transactions.
 * @export
 * @interface CosmwasmWasmV1AbsoluteTxPosition
 */
export interface CosmwasmWasmV1AbsoluteTxPosition {
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1AbsoluteTxPosition
     */
    'block_height'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1AbsoluteTxPosition
     */
    'tx_index'?: string;
}
/**
 * AccessConfig access control type.
 * @export
 * @interface CosmwasmWasmV1AccessConfig
 */
export interface CosmwasmWasmV1AccessConfig {
    /**
     * - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty value  - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden  - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to an address  - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
     * @type {string}
     * @memberof CosmwasmWasmV1AccessConfig
     */
    'permission'?: CosmwasmWasmV1AccessConfigPermissionEnum;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1AccessConfig
     */
    'address'?: string;
}

export const CosmwasmWasmV1AccessConfigPermissionEnum = {
    Unspecified: 'ACCESS_TYPE_UNSPECIFIED',
    Nobody: 'ACCESS_TYPE_NOBODY',
    OnlyAddress: 'ACCESS_TYPE_ONLY_ADDRESS',
    Everybody: 'ACCESS_TYPE_EVERYBODY'
} as const;

export type CosmwasmWasmV1AccessConfigPermissionEnum = typeof CosmwasmWasmV1AccessConfigPermissionEnum[keyof typeof CosmwasmWasmV1AccessConfigPermissionEnum];

/**
 * - ACCESS_TYPE_UNSPECIFIED: AccessTypeUnspecified placeholder for empty value  - ACCESS_TYPE_NOBODY: AccessTypeNobody forbidden  - ACCESS_TYPE_ONLY_ADDRESS: AccessTypeOnlyAddress restricted to an address  - ACCESS_TYPE_EVERYBODY: AccessTypeEverybody unrestricted
 * @export
 * @enum {string}
 */

export const CosmwasmWasmV1AccessType = {
    Unspecified: 'ACCESS_TYPE_UNSPECIFIED',
    Nobody: 'ACCESS_TYPE_NOBODY',
    OnlyAddress: 'ACCESS_TYPE_ONLY_ADDRESS',
    Everybody: 'ACCESS_TYPE_EVERYBODY'
} as const;

export type CosmwasmWasmV1AccessType = typeof CosmwasmWasmV1AccessType[keyof typeof CosmwasmWasmV1AccessType];


/**
 * 
 * @export
 * @interface CosmwasmWasmV1CodeInfoResponse
 */
export interface CosmwasmWasmV1CodeInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1CodeInfoResponse
     */
    'code_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1CodeInfoResponse
     */
    'creator'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1CodeInfoResponse
     */
    'data_hash'?: string;
    /**
     * 
     * @type {CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermission}
     * @memberof CosmwasmWasmV1CodeInfoResponse
     */
    'instantiate_permission'?: CodeInfoResponseContainsCodeMetaDataFromCodeInfoInstantiatePermission;
}
/**
 * ContractCodeHistoryEntry metadata to a contract.
 * @export
 * @interface CosmwasmWasmV1ContractCodeHistoryEntry
 */
export interface CosmwasmWasmV1ContractCodeHistoryEntry {
    /**
     * - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED: ContractCodeHistoryOperationTypeUnspecified placeholder for empty value  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
     * @type {string}
     * @memberof CosmwasmWasmV1ContractCodeHistoryEntry
     */
    'operation'?: CosmwasmWasmV1ContractCodeHistoryEntryOperationEnum;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1ContractCodeHistoryEntry
     */
    'code_id'?: string;
    /**
     * 
     * @type {QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerUpdated}
     * @memberof CosmwasmWasmV1ContractCodeHistoryEntry
     */
    'updated'?: QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerUpdated;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1ContractCodeHistoryEntry
     */
    'msg'?: string;
}

export const CosmwasmWasmV1ContractCodeHistoryEntryOperationEnum = {
    Unspecified: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED',
    Init: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT',
    Migrate: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE',
    Genesis: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS'
} as const;

export type CosmwasmWasmV1ContractCodeHistoryEntryOperationEnum = typeof CosmwasmWasmV1ContractCodeHistoryEntryOperationEnum[keyof typeof CosmwasmWasmV1ContractCodeHistoryEntryOperationEnum];

/**
 * - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED: ContractCodeHistoryOperationTypeUnspecified placeholder for empty value  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
 * @export
 * @enum {string}
 */

export const CosmwasmWasmV1ContractCodeHistoryOperationType = {
    Unspecified: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED',
    Init: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT',
    Migrate: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE',
    Genesis: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS'
} as const;

export type CosmwasmWasmV1ContractCodeHistoryOperationType = typeof CosmwasmWasmV1ContractCodeHistoryOperationType[keyof typeof CosmwasmWasmV1ContractCodeHistoryOperationType];


/**
 * 
 * @export
 * @interface CosmwasmWasmV1ContractInfo
 */
export interface CosmwasmWasmV1ContractInfo {
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1ContractInfo
     */
    'code_id'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1ContractInfo
     */
    'creator'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1ContractInfo
     */
    'admin'?: string;
    /**
     * Label is optional metadata to be stored with a contract instance.
     * @type {string}
     * @memberof CosmwasmWasmV1ContractInfo
     */
    'label'?: string;
    /**
     * 
     * @type {CreatedTxPositionWhenTheContractWasInstantiatedThisDataShouldKeptInternalAndNotBeExposedViaQueryResultsJustUseForSorting}
     * @memberof CosmwasmWasmV1ContractInfo
     */
    'created'?: CreatedTxPositionWhenTheContractWasInstantiatedThisDataShouldKeptInternalAndNotBeExposedViaQueryResultsJustUseForSorting;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1ContractInfo
     */
    'ibc_port_id'?: string;
    /**
     * 
     * @type {CodesDefaultResponseDetailsInner}
     * @memberof CosmwasmWasmV1ContractInfo
     */
    'extension'?: CodesDefaultResponseDetailsInner;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1Model
 */
export interface CosmwasmWasmV1Model {
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1Model
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1Model
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QueryAllContractStateResponse
 */
export interface CosmwasmWasmV1QueryAllContractStateResponse {
    /**
     * 
     * @type {Array<ModelIsAStructThatHoldsAKVPair>}
     * @memberof CosmwasmWasmV1QueryAllContractStateResponse
     */
    'models'?: Array<ModelIsAStructThatHoldsAKVPair>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof CosmwasmWasmV1QueryAllContractStateResponse
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QueryCodeResponse
 */
export interface CosmwasmWasmV1QueryCodeResponse {
    /**
     * 
     * @type {CodeInfoResponseContainsCodeMetaDataFromCodeInfo}
     * @memberof CosmwasmWasmV1QueryCodeResponse
     */
    'code_info'?: CodeInfoResponseContainsCodeMetaDataFromCodeInfo;
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1QueryCodeResponse
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QueryCodesResponse
 */
export interface CosmwasmWasmV1QueryCodesResponse {
    /**
     * 
     * @type {Array<CodeInfoResponseContainsCodeMetaDataFromCodeInfo>}
     * @memberof CosmwasmWasmV1QueryCodesResponse
     */
    'code_infos'?: Array<CodeInfoResponseContainsCodeMetaDataFromCodeInfo>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof CosmwasmWasmV1QueryCodesResponse
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QueryContractHistoryResponse
 */
export interface CosmwasmWasmV1QueryContractHistoryResponse {
    /**
     * 
     * @type {Array<QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner>}
     * @memberof CosmwasmWasmV1QueryContractHistoryResponse
     */
    'entries'?: Array<QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof CosmwasmWasmV1QueryContractHistoryResponse
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QueryContractInfoResponse
 */
export interface CosmwasmWasmV1QueryContractInfoResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1QueryContractInfoResponse
     */
    'address'?: string;
    /**
     * 
     * @type {ContractInfoStoresAWASMContractInstance}
     * @memberof CosmwasmWasmV1QueryContractInfoResponse
     */
    'contract_info'?: ContractInfoStoresAWASMContractInstance;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QueryContractsByCodeResponse
 */
export interface CosmwasmWasmV1QueryContractsByCodeResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof CosmwasmWasmV1QueryContractsByCodeResponse
     */
    'contracts'?: Array<string>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof CosmwasmWasmV1QueryContractsByCodeResponse
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QueryPinnedCodesResponse
 */
export interface CosmwasmWasmV1QueryPinnedCodesResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof CosmwasmWasmV1QueryPinnedCodesResponse
     */
    'code_ids'?: Array<string>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof CosmwasmWasmV1QueryPinnedCodesResponse
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QueryRawContractStateResponse
 */
export interface CosmwasmWasmV1QueryRawContractStateResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1QueryRawContractStateResponse
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface CosmwasmWasmV1QuerySmartContractStateResponse
 */
export interface CosmwasmWasmV1QuerySmartContractStateResponse {
    /**
     * 
     * @type {string}
     * @memberof CosmwasmWasmV1QuerySmartContractStateResponse
     */
    'data'?: string;
}
/**
 * AbsoluteTxPosition is a unique transaction position that allows for global ordering of transactions.
 * @export
 * @interface CreatedTxPositionWhenTheContractWasInstantiatedThisDataShouldKeptInternalAndNotBeExposedViaQueryResultsJustUseForSorting
 */
export interface CreatedTxPositionWhenTheContractWasInstantiatedThisDataShouldKeptInternalAndNotBeExposedViaQueryResultsJustUseForSorting {
    /**
     * 
     * @type {string}
     * @memberof CreatedTxPositionWhenTheContractWasInstantiatedThisDataShouldKeptInternalAndNotBeExposedViaQueryResultsJustUseForSorting
     */
    'block_height'?: string;
    /**
     * 
     * @type {string}
     * @memberof CreatedTxPositionWhenTheContractWasInstantiatedThisDataShouldKeptInternalAndNotBeExposedViaQueryResultsJustUseForSorting
     */
    'tx_index'?: string;
}
/**
 * `Any` contains an arbitrary serialized protocol buffer message along with a URL that describes the type of the serialized message.  Protobuf library provides support to pack/unpack Any values in the form of utility functions or additional generated methods of the Any type.  Example 1: Pack and unpack a message in C++.      Foo foo = ...;     Any any;     any.PackFrom(foo);     ...     if (any.UnpackTo(&foo)) {       ...     }  Example 2: Pack and unpack a message in Java.      Foo foo = ...;     Any any = Any.pack(foo);     ...     if (any.is(Foo.class)) {       foo = any.unpack(Foo.class);     }   Example 3: Pack and unpack a message in Python.      foo = Foo(...)     any = Any()     any.Pack(foo)     ...     if any.Is(Foo.DESCRIPTOR):       any.Unpack(foo)       ...   Example 4: Pack and unpack a message in Go       foo := &pb.Foo{...}      any, err := ptypes.MarshalAny(foo)      ...      foo := &pb.Foo{}      if err := ptypes.UnmarshalAny(any, foo); err != nil {        ...      }  The pack methods provided by protobuf library will by default use \'type.googleapis.com/full.type.name\' as the type URL and the unpack methods only use the fully qualified type name after the last \'/\' in the type URL, for example \"foo.bar.com/x/y.z\" will yield type name \"y.z\".   JSON ==== The JSON representation of an `Any` value uses the regular representation of the deserialized, embedded message, with an additional field `@type` which contains the type URL. Example:      package google.profile;     message Person {       string first_name = 1;       string last_name = 2;     }      {       \"@type\": \"type.googleapis.com/google.profile.Person\",       \"firstName\": <string>,       \"lastName\": <string>     }  If the embedded message type is well-known and has a custom JSON representation, that representation will be embedded adding a field `value` which holds the custom JSON in addition to the `@type` field. Example (for message [google.protobuf.Duration][]):      {       \"@type\": \"type.googleapis.com/google.protobuf.Duration\",       \"value\": \"1.212s\"     }
 * @export
 * @interface GoogleProtobufAny
 */
export interface GoogleProtobufAny {
    /**
     * A URL/resource name that uniquely identifies the type of the serialized protocol buffer message. This string must contain at least one \"/\" character. The last segment of the URL\'s path must represent the fully qualified name of the type (as in `path/google.protobuf.Duration`). The name should be in a canonical form (e.g., leading \".\" is not accepted).  In practice, teams usually precompile into the binary all types that they expect it to use in the context of Any. However, for URLs which use the scheme `http`, `https`, or no scheme, one can optionally set up a type server that maps type URLs to message definitions as follows:  * If no scheme is provided, `https` is assumed. * An HTTP GET on the URL must yield a [google.protobuf.Type][]   value in binary format, or produce an error. * Applications are allowed to cache lookup results based on the   URL, or have them precompiled into a binary to avoid any   lookup. Therefore, binary compatibility needs to be preserved   on changes to types. (Use versioned type names to manage   breaking changes.)  Note: this functionality is not currently available in the official protobuf release, and it is not used for type URLs beginning with type.googleapis.com.  Schemes other than `http`, `https` (or the empty scheme) might be used with implementation specific semantics.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    'type_url'?: string;
    /**
     * Must be a valid serialized protocol buffer of the above specified type.
     * @type {string}
     * @memberof GoogleProtobufAny
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface GrpcGatewayRuntimeError
 */
export interface GrpcGatewayRuntimeError {
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    'error'?: string;
    /**
     * 
     * @type {number}
     * @memberof GrpcGatewayRuntimeError
     */
    'code'?: number;
    /**
     * 
     * @type {string}
     * @memberof GrpcGatewayRuntimeError
     */
    'message'?: string;
    /**
     * 
     * @type {Array<CodesDefaultResponseDetailsInner>}
     * @memberof GrpcGatewayRuntimeError
     */
    'details'?: Array<CodesDefaultResponseDetailsInner>;
}
/**
 * 
 * @export
 * @interface ModelIsAStructThatHoldsAKVPair
 */
export interface ModelIsAStructThatHoldsAKVPair {
    /**
     * 
     * @type {string}
     * @memberof ModelIsAStructThatHoldsAKVPair
     */
    'key'?: string;
    /**
     * 
     * @type {string}
     * @memberof ModelIsAStructThatHoldsAKVPair
     */
    'value'?: string;
}
/**
 * 
 * @export
 * @interface QueryAllContractStateResponseIsTheResponseTypeForTheQueryAllContractStateRPCMethod
 */
export interface QueryAllContractStateResponseIsTheResponseTypeForTheQueryAllContractStateRPCMethod {
    /**
     * 
     * @type {Array<ModelIsAStructThatHoldsAKVPair>}
     * @memberof QueryAllContractStateResponseIsTheResponseTypeForTheQueryAllContractStateRPCMethod
     */
    'models'?: Array<ModelIsAStructThatHoldsAKVPair>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof QueryAllContractStateResponseIsTheResponseTypeForTheQueryAllContractStateRPCMethod
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * 
 * @export
 * @interface QueryCodeResponseIsTheResponseTypeForTheQueryCodeRPCMethod
 */
export interface QueryCodeResponseIsTheResponseTypeForTheQueryCodeRPCMethod {
    /**
     * 
     * @type {CodeInfoResponseContainsCodeMetaDataFromCodeInfo}
     * @memberof QueryCodeResponseIsTheResponseTypeForTheQueryCodeRPCMethod
     */
    'code_info'?: CodeInfoResponseContainsCodeMetaDataFromCodeInfo;
    /**
     * 
     * @type {string}
     * @memberof QueryCodeResponseIsTheResponseTypeForTheQueryCodeRPCMethod
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethod
 */
export interface QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethod {
    /**
     * 
     * @type {Array<CodeInfoResponseContainsCodeMetaDataFromCodeInfo>}
     * @memberof QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethod
     */
    'code_infos'?: Array<CodeInfoResponseContainsCodeMetaDataFromCodeInfo>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethod
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * pagination defines the pagination in the response.
 * @export
 * @interface QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination
 */
export interface QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination {
    /**
     * 
     * @type {string}
     * @memberof QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination
     */
    'next_key'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination
     */
    'total'?: string;
}
/**
 * 
 * @export
 * @interface QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethod
 */
export interface QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethod {
    /**
     * 
     * @type {Array<QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner>}
     * @memberof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethod
     */
    'entries'?: Array<QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethod
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * ContractCodeHistoryEntry metadata to a contract.
 * @export
 * @interface QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner
 */
export interface QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner {
    /**
     * - CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED: ContractCodeHistoryOperationTypeUnspecified placeholder for empty value  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT: ContractCodeHistoryOperationTypeInit on chain contract instantiation  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE: ContractCodeHistoryOperationTypeMigrate code migration  - CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS: ContractCodeHistoryOperationTypeGenesis based on genesis data
     * @type {string}
     * @memberof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner
     */
    'operation'?: QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerOperationEnum;
    /**
     * 
     * @type {string}
     * @memberof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner
     */
    'code_id'?: string;
    /**
     * 
     * @type {QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerUpdated}
     * @memberof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner
     */
    'updated'?: QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerUpdated;
    /**
     * 
     * @type {string}
     * @memberof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInner
     */
    'msg'?: string;
}

export const QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerOperationEnum = {
    Unspecified: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_UNSPECIFIED',
    Init: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_INIT',
    Migrate: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_MIGRATE',
    Genesis: 'CONTRACT_CODE_HISTORY_OPERATION_TYPE_GENESIS'
} as const;

export type QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerOperationEnum = typeof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerOperationEnum[keyof typeof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerOperationEnum];

/**
 * Updated Tx position when the operation was executed.
 * @export
 * @interface QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerUpdated
 */
export interface QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerUpdated {
    /**
     * 
     * @type {string}
     * @memberof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerUpdated
     */
    'block_height'?: string;
    /**
     * 
     * @type {string}
     * @memberof QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethodEntriesInnerUpdated
     */
    'tx_index'?: string;
}
/**
 * 
 * @export
 * @interface QueryContractInfoResponseIsTheResponseTypeForTheQueryContractInfoRPCMethod
 */
export interface QueryContractInfoResponseIsTheResponseTypeForTheQueryContractInfoRPCMethod {
    /**
     * 
     * @type {string}
     * @memberof QueryContractInfoResponseIsTheResponseTypeForTheQueryContractInfoRPCMethod
     */
    'address'?: string;
    /**
     * 
     * @type {ContractInfoStoresAWASMContractInstance}
     * @memberof QueryContractInfoResponseIsTheResponseTypeForTheQueryContractInfoRPCMethod
     */
    'contract_info'?: ContractInfoStoresAWASMContractInstance;
}
/**
 * 
 * @export
 * @interface QueryContractsByCodeResponseIsTheResponseTypeForTheQueryContractsByCodeRPCMethod
 */
export interface QueryContractsByCodeResponseIsTheResponseTypeForTheQueryContractsByCodeRPCMethod {
    /**
     * 
     * @type {Array<string>}
     * @memberof QueryContractsByCodeResponseIsTheResponseTypeForTheQueryContractsByCodeRPCMethod
     */
    'contracts'?: Array<string>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof QueryContractsByCodeResponseIsTheResponseTypeForTheQueryContractsByCodeRPCMethod
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * 
 * @export
 * @interface QueryPinnedCodesResponseIsTheResponseTypeForTheQueryPinnedCodesRPCMethod
 */
export interface QueryPinnedCodesResponseIsTheResponseTypeForTheQueryPinnedCodesRPCMethod {
    /**
     * 
     * @type {Array<string>}
     * @memberof QueryPinnedCodesResponseIsTheResponseTypeForTheQueryPinnedCodesRPCMethod
     */
    'code_ids'?: Array<string>;
    /**
     * 
     * @type {QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination}
     * @memberof QueryPinnedCodesResponseIsTheResponseTypeForTheQueryPinnedCodesRPCMethod
     */
    'pagination'?: QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethodPagination;
}
/**
 * 
 * @export
 * @interface QueryRawContractStateResponseIsTheResponseTypeForTheQueryRawContractStateRPCMethod
 */
export interface QueryRawContractStateResponseIsTheResponseTypeForTheQueryRawContractStateRPCMethod {
    /**
     * 
     * @type {string}
     * @memberof QueryRawContractStateResponseIsTheResponseTypeForTheQueryRawContractStateRPCMethod
     */
    'data'?: string;
}
/**
 * 
 * @export
 * @interface QuerySmartContractStateResponseIsTheResponseTypeForTheQuerySmartContractStateRPCMethod
 */
export interface QuerySmartContractStateResponseIsTheResponseTypeForTheQuerySmartContractStateRPCMethod {
    /**
     * 
     * @type {string}
     * @memberof QuerySmartContractStateResponseIsTheResponseTypeForTheQuerySmartContractStateRPCMethod
     */
    'data'?: string;
}

/**
 * QueryApi - axios parameter creator
 * @export
 */
export const QueryApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary AllContractState gets all raw store data for a single contract
         * @param {string} address address is the address of the contract
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allContractState: async (address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('allContractState', 'address', address)
            const localVarPath = `/cosmwasm/wasm/v1/contract/{address}/state`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Code gets the binary code and metadata for a singe wasm code
         * @param {string} codeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        code: async (codeId: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            assertParamExists('code', 'codeId', codeId)
            const localVarPath = `/cosmwasm/wasm/v1/code/{code_id}`
                .replace(`{${"code_id"}}`, encodeURIComponent(String(codeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Codes gets the metadata for all stored wasm codes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codes: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmwasm/wasm/v1/code`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ContractHistory gets the contract code history
         * @param {string} address address is the address of the contract to query
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractHistory: async (address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('contractHistory', 'address', address)
            const localVarPath = `/cosmwasm/wasm/v1/contract/{address}/history`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ContractInfo gets the contract meta data
         * @param {string} address address is the address of the contract to query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractInfo: async (address: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('contractInfo', 'address', address)
            const localVarPath = `/cosmwasm/wasm/v1/contract/{address}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary ContractsByCode lists all smart contracts for a code id
         * @param {string} codeId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsByCode: async (codeId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'codeId' is not null or undefined
            assertParamExists('contractsByCode', 'codeId', codeId)
            const localVarPath = `/cosmwasm/wasm/v1/code/{code_id}/contracts`
                .replace(`{${"code_id"}}`, encodeURIComponent(String(codeId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary PinnedCodes gets the pinned code ids
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinnedCodes: async (paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/cosmwasm/wasm/v1/codes/pinned`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (paginationKey !== undefined) {
                localVarQueryParameter['pagination.key'] = paginationKey;
            }

            if (paginationOffset !== undefined) {
                localVarQueryParameter['pagination.offset'] = paginationOffset;
            }

            if (paginationLimit !== undefined) {
                localVarQueryParameter['pagination.limit'] = paginationLimit;
            }

            if (paginationCountTotal !== undefined) {
                localVarQueryParameter['pagination.count_total'] = paginationCountTotal;
            }

            if (paginationReverse !== undefined) {
                localVarQueryParameter['pagination.reverse'] = paginationReverse;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary RawContractState gets single key from the raw store data of a contract
         * @param {string} address address is the address of the contract
         * @param {string} queryData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rawContractState: async (address: string, queryData: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('rawContractState', 'address', address)
            // verify required parameter 'queryData' is not null or undefined
            assertParamExists('rawContractState', 'queryData', queryData)
            const localVarPath = `/cosmwasm/wasm/v1/contract/{address}/raw/{query_data}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"query_data"}}`, encodeURIComponent(String(queryData)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary SmartContractState get smart query result from the contract
         * @param {string} address address is the address of the contract
         * @param {string} queryData QueryData contains the query data passed to the contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartContractState: async (address: string, queryData: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'address' is not null or undefined
            assertParamExists('smartContractState', 'address', address)
            // verify required parameter 'queryData' is not null or undefined
            assertParamExists('smartContractState', 'queryData', queryData)
            const localVarPath = `/cosmwasm/wasm/v1/contract/{address}/smart/{query_data}`
                .replace(`{${"address"}}`, encodeURIComponent(String(address)))
                .replace(`{${"query_data"}}`, encodeURIComponent(String(queryData)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * QueryApi - functional programming interface
 * @export
 */
export const QueryApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = QueryApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary AllContractState gets all raw store data for a single contract
         * @param {string} address address is the address of the contract
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async allContractState(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryAllContractStateResponseIsTheResponseTypeForTheQueryAllContractStateRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.allContractState(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Code gets the binary code and metadata for a singe wasm code
         * @param {string} codeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async code(codeId: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryCodeResponseIsTheResponseTypeForTheQueryCodeRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.code(codeId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary Codes gets the metadata for all stored wasm codes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async codes(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.codes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ContractHistory gets the contract code history
         * @param {string} address address is the address of the contract to query
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contractHistory(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contractHistory(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ContractInfo gets the contract meta data
         * @param {string} address address is the address of the contract to query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contractInfo(address: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryContractInfoResponseIsTheResponseTypeForTheQueryContractInfoRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contractInfo(address, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary ContractsByCode lists all smart contracts for a code id
         * @param {string} codeId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async contractsByCode(codeId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryContractsByCodeResponseIsTheResponseTypeForTheQueryContractsByCodeRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.contractsByCode(codeId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary PinnedCodes gets the pinned code ids
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async pinnedCodes(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryPinnedCodesResponseIsTheResponseTypeForTheQueryPinnedCodesRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.pinnedCodes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary RawContractState gets single key from the raw store data of a contract
         * @param {string} address address is the address of the contract
         * @param {string} queryData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rawContractState(address: string, queryData: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QueryRawContractStateResponseIsTheResponseTypeForTheQueryRawContractStateRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rawContractState(address, queryData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * 
         * @summary SmartContractState get smart query result from the contract
         * @param {string} address address is the address of the contract
         * @param {string} queryData QueryData contains the query data passed to the contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async smartContractState(address: string, queryData: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<QuerySmartContractStateResponseIsTheResponseTypeForTheQuerySmartContractStateRPCMethod>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.smartContractState(address, queryData, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * QueryApi - factory interface
 * @export
 */
export const QueryApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = QueryApiFp(configuration)
    return {
        /**
         * 
         * @summary AllContractState gets all raw store data for a single contract
         * @param {string} address address is the address of the contract
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        allContractState(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QueryAllContractStateResponseIsTheResponseTypeForTheQueryAllContractStateRPCMethod> {
            return localVarFp.allContractState(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Code gets the binary code and metadata for a singe wasm code
         * @param {string} codeId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        code(codeId: string, options?: any): AxiosPromise<QueryCodeResponseIsTheResponseTypeForTheQueryCodeRPCMethod> {
            return localVarFp.code(codeId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Codes gets the metadata for all stored wasm codes
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        codes(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QueryCodesResponseIsTheResponseTypeForTheQueryCodesRPCMethod> {
            return localVarFp.codes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ContractHistory gets the contract code history
         * @param {string} address address is the address of the contract to query
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractHistory(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QueryContractHistoryResponseIsTheResponseTypeForTheQueryContractHistoryRPCMethod> {
            return localVarFp.contractHistory(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ContractInfo gets the contract meta data
         * @param {string} address address is the address of the contract to query
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractInfo(address: string, options?: any): AxiosPromise<QueryContractInfoResponseIsTheResponseTypeForTheQueryContractInfoRPCMethod> {
            return localVarFp.contractInfo(address, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary ContractsByCode lists all smart contracts for a code id
         * @param {string} codeId 
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        contractsByCode(codeId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QueryContractsByCodeResponseIsTheResponseTypeForTheQueryContractsByCodeRPCMethod> {
            return localVarFp.contractsByCode(codeId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary PinnedCodes gets the pinned code ids
         * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
         * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
         * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
         * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
         * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        pinnedCodes(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: any): AxiosPromise<QueryPinnedCodesResponseIsTheResponseTypeForTheQueryPinnedCodesRPCMethod> {
            return localVarFp.pinnedCodes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary RawContractState gets single key from the raw store data of a contract
         * @param {string} address address is the address of the contract
         * @param {string} queryData 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rawContractState(address: string, queryData: string, options?: any): AxiosPromise<QueryRawContractStateResponseIsTheResponseTypeForTheQueryRawContractStateRPCMethod> {
            return localVarFp.rawContractState(address, queryData, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary SmartContractState get smart query result from the contract
         * @param {string} address address is the address of the contract
         * @param {string} queryData QueryData contains the query data passed to the contract
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        smartContractState(address: string, queryData: string, options?: any): AxiosPromise<QuerySmartContractStateResponseIsTheResponseTypeForTheQuerySmartContractStateRPCMethod> {
            return localVarFp.smartContractState(address, queryData, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * QueryApi - object-oriented interface
 * @export
 * @class QueryApi
 * @extends {BaseAPI}
 */
export class QueryApi extends BaseAPI {
    /**
     * 
     * @summary AllContractState gets all raw store data for a single contract
     * @param {string} address address is the address of the contract
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public allContractState(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).allContractState(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Code gets the binary code and metadata for a singe wasm code
     * @param {string} codeId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public code(codeId: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).code(codeId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Codes gets the metadata for all stored wasm codes
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public codes(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).codes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ContractHistory gets the contract code history
     * @param {string} address address is the address of the contract to query
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public contractHistory(address: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).contractHistory(address, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ContractInfo gets the contract meta data
     * @param {string} address address is the address of the contract to query
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public contractInfo(address: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).contractInfo(address, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary ContractsByCode lists all smart contracts for a code id
     * @param {string} codeId 
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public contractsByCode(codeId: string, paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).contractsByCode(codeId, paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary PinnedCodes gets the pinned code ids
     * @param {string} [paginationKey] key is a value returned in PageResponse.next_key to begin querying the next page most efficiently. Only one of offset or key should be set.
     * @param {string} [paginationOffset] offset is a numeric offset that can be used when key is unavailable. It is less efficient than using key. Only one of offset or key should be set.
     * @param {string} [paginationLimit] limit is the total number of results to be returned in the result page. If left empty it will default to a value to be set by each app.
     * @param {boolean} [paginationCountTotal] count_total is set to true  to indicate that the result set should include a count of the total number of items available for pagination in UIs. count_total is only respected when offset is used. It is ignored when key is set.
     * @param {boolean} [paginationReverse] reverse is set to true if results are to be returned in the descending order.  Since: cosmos-sdk 0.43
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public pinnedCodes(paginationKey?: string, paginationOffset?: string, paginationLimit?: string, paginationCountTotal?: boolean, paginationReverse?: boolean, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).pinnedCodes(paginationKey, paginationOffset, paginationLimit, paginationCountTotal, paginationReverse, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary RawContractState gets single key from the raw store data of a contract
     * @param {string} address address is the address of the contract
     * @param {string} queryData 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public rawContractState(address: string, queryData: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).rawContractState(address, queryData, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary SmartContractState get smart query result from the contract
     * @param {string} address address is the address of the contract
     * @param {string} queryData QueryData contains the query data passed to the contract
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof QueryApi
     */
    public smartContractState(address: string, queryData: string, options?: AxiosRequestConfig) {
        return QueryApiFp(this.configuration).smartContractState(address, queryData, options).then((request) => request(this.axios, this.basePath));
    }
}



